# StableFlow AI SDK - 项目上下文规则

## 项目概述

这是一个 **TypeScript SDK 项目**，用于跨链代币交换功能。

### 核心信息
- **项目名称**: stableflow-ai-sdk
- **版本**: 1.0.0
- **创建日期**: 2025-10-24
- **主服务类**: `SFA` (StableFlow AI)
- **API 基础地址**: https://api.stableflow.ai
- **原型项目**: one-click-sdk-typescript (已完全复刻)

## 项目背景

本项目是从 `one-click-sdk-typescript` 复刻而来，主要变更：
1. 服务类从 `OneClickService` 改为 `SFA`
2. API 地址从 `https://1click.chaindefuser.com` 改为 `https://api.stableflow.ai`
3. 包名从 `@defuse-protocol/one-click-sdk-typescript` 改为 `stableflow-ai-sdk`
4. 添加了详尽的中英双语文档

## 项目结构

```
src/
├── core/          - 核心工具模块（HTTP请求、错误处理等）
├── models/        - 数据模型和类型定义（11个模型）
├── services/      - SFA 服务类（主要API接口）
└── index.ts       - 导出所有公共API
```

## API 方法

主服务类 `SFA` 提供4个静态方法：

1. **SFA.getTokens()** - 获取支持的代币列表（无需认证）
2. **SFA.getQuote(request)** - 创建交换报价（需要JWT）
3. **SFA.submitDepositTx(request)** - 提交存款交易（需要JWT）
4. **SFA.getExecutionStatus(address)** - 查询执行状态（需要JWT）

## 技术栈

- TypeScript 5.4+
- axios (HTTP 客户端)
- form-data (表单数据处理)
- tsup (构建工具)

## 开发规范

### 代码风格
- 使用 TypeScript 严格模式
- 所有代码都有完整类型定义
- 注释使用中文
- 对外文案使用英文

### 文件命名
- 类型文件：PascalCase (如 `QuoteRequest.ts`)
- 服务文件：PascalCase (如 `SFA.ts`)
- 配置文件：小写或 camelCase

### 导出规范
- 使用 named exports，不使用 default export
- 在 `src/index.ts` 中统一导出所有公共API

## 重要文件说明

### 核心文件
- `src/services/SFA.ts` - **主服务类，最重要的文件**
- `src/core/OpenAPI.ts` - API 配置（BASE URL, TOKEN等）
- `src/core/request.ts` - HTTP 请求封装
- `src/index.ts` - SDK 入口

### 文档文件
- `README.md` - 主文档（中英双语）
- `QUICK_START.md` - 快速开始指南
- `PROJECT_STRUCTURE.md` - 项目结构详解
- `PROJECT_SUMMARY.md` - 完整项目总结（**包含所有背景信息**）

### 示例文件
- `examples/basic-swap-flow.ts` - 完整使用示例

## 认证说明

API 使用 JWT 认证：

```typescript
// 静态 Token
OpenAPI.TOKEN = 'your-jwt-token';

// 动态 Token（支持自动刷新）
OpenAPI.TOKEN = async () => {
    return await getNewToken();
};
```

## 常见任务

### 构建项目
```bash
npm run build
```

### 开发模式
```bash
npm run dev
```

### 测试示例
```bash
cd examples && npm install && npm start
```

## API 端点映射

| SDK 方法 | HTTP | 端点 | 认证 |
|---------|------|------|-----|
| SFA.getTokens() | GET | /v0/tokens | ❌ |
| SFA.getQuote() | POST | /v0/quote | ✅ |
| SFA.submitDepositTx() | POST | /v0/deposit/submit | ✅ |
| SFA.getExecutionStatus() | GET | /v0/status | ✅ |

## 注意事项

1. **不要修改 src/core/ 目录下的文件**，除非是重大架构调整
2. **添加新功能时**，先在 `src/models/` 定义类型，再在 `SFA` 类中添加方法
3. **修改 API 地址**，在 `src/core/OpenAPI.ts` 的 `BASE` 字段修改
4. **所有修改后**，记得更新 `CHANGELOG.md`

## 快速理解项目

如果这是你第一次接触这个项目，按以下顺序阅读：

1. **PROJECT_SUMMARY.md** - 了解项目完整背景和所有功能
2. **README.md** - 了解如何使用
3. **QUICK_START.md** - 5分钟快速上手
4. **src/services/SFA.ts** - 查看核心API实现
5. **examples/basic-swap-flow.ts** - 查看完整使用示例

## AI 助手指南

当用户询问关于本项目的问题时：

1. **优先参考**: `PROJECT_SUMMARY.md` 包含完整的项目信息
2. **API 使用**: 参考 `README.md` 和 `QUICK_START.md`
3. **代码结构**: 参考 `PROJECT_STRUCTURE.md`
4. **示例代码**: 参考 `examples/basic-swap-flow.ts`
5. **关键改动**: 服务类名从 `OneClickService` 改为 `SFA`

## 项目状态

✅ **完成并可用**
- 所有代码已完成
- TypeScript 编译通过
- 构建成功（dist/ 目录）
- 文档齐全
- 准备发布到 npm

## 下一步建议

1. 配置真实的 API 地址（修改 `src/core/OpenAPI.ts`）
2. 申请 JWT Token 进行测试
3. 运行示例代码验证功能
4. 根据需要添加新功能或修改现有功能
5. 发布到 npm: `npm publish`

